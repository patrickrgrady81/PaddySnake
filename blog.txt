When I started using javascript many years ago, I was not a big fan. I like working with object-oriented languages such as Java and C#, so learning javascript and prototypical inheritance was not my cup of tea. I then moved on to python and really clung to that. I started learning a lot of different aspects of python including machine learning, games, and other algorithm types of things related to programming with python. This was before I learned about GitHub or even cared about it so most of the stuff I wrote in the past is gone. 

That being said once I learned that ES6 was coming out and javascript would have classes finally, I was super excited. I started learning basic javascript because I knew it might be a while before all the browsers caught up and classes were a thing in all of javascript. At this point I had done a little bit of HTML and CSS but nothing major because I was fighting learning javascript. I had done a little with Django, a python backend so I did dabble a little bit in basic front end development, but nothing worth showing off.

The big differences between ES5 and ES6 for me were the additions of classes. The way I learned object-oriented programming was that making my objects was a way to create my data types. You can also create these objects that not only have properties all of their own, such as a Dog that has a name. But the best part of objects they also have their own logic in methods. So my dog can Bark(), Sit(), Eat(), etc. This can be quite powerful when you add in inheritance. Instead of just a Dog I could make that Dog inherit from an Animal. The Animal can then have a name and an age. When I inherit from that animal in my Dog class it automatically has that name and age instance variable. So if I make a Cat class that inherits from Animal, again, it has the name and age. It is often compared to a blueprint where the object is the instance of that blueprint. The way I understood prototypes, things like this were much harder to accomplish and I never learned enough to compare the two very well.

The reason for using objects in this way is such a great programming technique is that when you think of the world you think of it in terms of different "things." So you see cars, houses, people, animals, etc. These can each be represented as an object that has its own properties and methods. Thinking about your programming project makes it easier to divide each part up into its own unique component. This helps alleviate bugs and helps readability and maintenance of code. This way of programming, in my opinion, is the best way to organize a large project instead of a procedural or functional approach. I know that there are definite advantages to the other programming paradigms in certain situations, I choose to think in terms of objects when I start a programming adventure.